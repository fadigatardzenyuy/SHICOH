// app/api/format-consultation/route.ts

import { GoogleGenerativeAI } from '@google/generative-ai';
import { NextRequest, NextResponse } from 'next/server';

interface FormatRequest {
  text: string;
}

// This interface defines the rich data structure we want the AI to generate.
// It will be used on both the backend and frontend.
export interface FormattedConsultation {
  patientEmail: string | null;
  patientPhoneNumber: string | null;
  doctorName: string | null;
  consultationItems: {
    type: 'Lab Test' | 'Medication' | 'Procedure' | 'Other';
    name: string;
    result: string | null;
    fee: number | null;
  }[];
  summaryNotes: string; // A human-readable summary generated by the AI
}

interface ApiError {
  error: string;
}

export async function POST(request: NextRequest): Promise<NextResponse<FormattedConsultation | ApiError>> {
  const apiKey = process.env.GOOGLE_AI_API_KEY;
  if (!apiKey) {
    return NextResponse.json({ error: 'Server configuration error: API key not found.' }, { status: 500 });
  }

  const genAI = new GoogleGenerativeAI(apiKey);

  try {
    const body: FormatRequest = await request.json();
    const { text } = body;

    if (!text) {
      return NextResponse.json({ error: 'Text to format is required' }, { status: 400 });
    }

    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

    const prompt = `
      You are an expert medical data analyst. Your task is to analyze raw text from a doctor's consultation paper and structure it into a precise JSON format. The paper contains patient details and a table of services.

      **Input Text:**
      ---
      ${text}
      ---

      **Your Instructions:**
      1.  **Extract Key Details:** Identify the patient's email, the doctor's name, and the patient's phone number from the top of the text.
      2.  **Process Consultation Table:** The main body of the text is a table of services. For each row, identify the item/service name (from 'lab', 'test', or 'medication' columns), its result (from 'lab_result' or 'medication' columns), and its fee. Classify each item's type as 'Lab Test', 'Medication', 'Procedure', or 'Other'.
      3.  **Generate a Summary:** Create a concise, professional, human-readable summary of the consultation in the 'summaryNotes' field. This should be suitable for a doctor to review and send to a patient.
      4.  **Format the Output:** Structure all extracted information into a single JSON object. Adhere strictly to the schema below. If a value is not found, use \`null\`. For fees, convert them to numbers; if not a valid number, use \`null\`.

      **Output JSON Schema (RETURN ONLY THIS JSON OBJECT):**
      \`\`\`json
      {
        "patientEmail": "string | null",
        "patientPhoneNumber": "string | null",
        "doctorName": "string | null",
        "consultationItems": [
          {
            "type": "Lab Test' | 'Medication' | 'Procedure' | 'Other",
            "name": "string",
            "result": "string | null",
            "fee": "number | null"
          }
        ],
        "summaryNotes": "string"
      }
      \`\`\`
    `;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const jsonString = response.text();

    const cleanedJsonString = jsonString.replace(/```json/g, '').replace(/```/g, '').trim();

    const formattedData: FormattedConsultation = JSON.parse(cleanedJsonString);

    if (!formattedData.consultationItems || !formattedData.summaryNotes) {
        throw new Error("AI response is missing required properties (consultationItems or summaryNotes).");
    }
    
    return NextResponse.json(formattedData);

  } catch (error) {
    console.error('Error formatting consultation (API Route):', error);
    const errorMessage = error instanceof Error ? error.message : 'Failed to format consultation. The AI may have returned an unexpected format.';
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}